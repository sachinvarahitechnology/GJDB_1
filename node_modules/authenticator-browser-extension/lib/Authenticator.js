"use strict";
/* eslint-disable @typescript-eslint/no-use-before-define, unicorn/prevent-abbreviations */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authenticator = void 0;
var gracefulFS = require("graceful-fs");
var Mustache = require("mustache");
var readPkg = require("read-pkg");
var path = require("upath");
var semver_1 = require("semver");
var tiny_types_1 = require("tiny-types");
// eslint-disable-next-line @typescript-eslint/no-var-requires -- no type definitions available
var Zip = require('node-zip');
var Authenticator = /** @class */ (function () {
    function Authenticator(username, password, permissions, cwd, fs) {
        if (cwd === void 0) { cwd = process.cwd(); }
        if (fs === void 0) { fs = gracefulFS; }
        this.username = username;
        this.password = password;
        this.permissions = permissions;
        this.cwd = cwd;
        this.fs = fs;
        tiny_types_1.ensure('username', username, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('password', password, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('permissions', permissions, tiny_types_1.isArray(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('cwd', cwd, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('fs', cwd, tiny_types_1.isDefined());
    }
    /**
     * @param {string} username
     * @param {string} password
     * @param {string[]} permissions
     *  See https://developer.chrome.com/extensions/declare_permissions
     */
    Authenticator.for = function (username, password, permissions) {
        if (permissions === void 0) { permissions = ['<all_urls>']; }
        return new Authenticator(username, password, permissions);
    };
    Authenticator.prototype.asBase64 = function () {
        return this.extensionFile().generate({ base64: true, compression: 'DEFLATE' });
    };
    Authenticator.prototype.asFileAt = function (relativePathToExtensionFile, mode) {
        if (mode === void 0) { mode = Number.parseInt('0777', 8) & (~process.umask()); }
        tiny_types_1.ensure('path to extension file', relativePathToExtensionFile, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)), tiny_types_1.or(tiny_types_1.endsWith('.xpi'), tiny_types_1.endsWith('.crx')));
        tiny_types_1.ensure('mode', mode, tiny_types_1.isNumber());
        var fullPath = path.resolve(this.cwd, relativePathToExtensionFile);
        this.fs.mkdirSync(path.dirname(fullPath), { recursive: true, mode: mode });
        var data = this.extensionFile().generate({ base64: false, compression: 'STORE' });
        this.fs.writeFileSync(fullPath, data, { encoding: 'binary', mode: mode });
        return fullPath;
    };
    Authenticator.prototype.asDirectoryAt = function (relativePathToDestinationDirectory, mode) {
        if (mode === void 0) { mode = Number.parseInt('0777', 8) & (~process.umask()); }
        tiny_types_1.ensure('path to destination directory', relativePathToDestinationDirectory, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('mode', mode, tiny_types_1.isNumber());
        var fullPath = path.resolve(this.cwd, relativePathToDestinationDirectory);
        this.fs.mkdirSync(fullPath, { recursive: true, mode: mode });
        this.fs.writeFileSync(path.resolve(fullPath, 'manifest.json'), this.authenticatorManifest());
        this.fs.writeFileSync(path.resolve(fullPath, 'authenticator.js'), this.authenticatorScript());
        return fullPath;
    };
    Authenticator.prototype.extensionFile = function () {
        var zip = new Zip();
        zip.file('manifest.json', this.authenticatorManifest());
        zip.file('authenticator.js', this.authenticatorScript());
        return zip;
    };
    Authenticator.prototype.authenticatorManifest = function () {
        var _a = readPkg.sync({ cwd: this.cwd }), name = _a.name, description = _a.description, version = _a.version;
        return Mustache.render(this.contentsOf('../extension/manifest.mustache.json'), {
            name: name,
            description: description,
            permissions: this.permissions.map(function (permission) { return "\"" + permission + "\""; }).join(', '),
            version: semver_1.coerce(version).version,
        });
    };
    Authenticator.prototype.authenticatorScript = function () {
        return Mustache.render(this.contentsOf('../extension/authenticator.mustache.js'), { username: this.username, password: this.password });
    };
    Authenticator.prototype.contentsOf = function (fileName) {
        return this.fs.readFileSync(path.join(__dirname, fileName)).toString('utf8');
    };
    return Authenticator;
}());
exports.Authenticator = Authenticator;
//# sourceMappingURL=Authenticator.js.map